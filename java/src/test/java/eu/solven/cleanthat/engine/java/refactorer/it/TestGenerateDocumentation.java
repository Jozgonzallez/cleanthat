/*
 * Copyright 2023 Benoit Lacelle - SOLVEN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.solven.cleanthat.engine.java.refactorer.it;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import org.codehaus.plexus.languages.java.version.JavaVersion;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Strings;

import eu.solven.cleanthat.engine.java.IJdkVersionConstants;
import eu.solven.cleanthat.engine.java.refactorer.meta.IMutator;
import eu.solven.cleanthat.engine.java.refactorer.meta.IRuleExternalReferences;
import eu.solven.cleanthat.engine.java.refactorer.mutators.composite.AllIncludingDraftCompositeMutators;
import eu.solven.cleanthat.engine.java.refactorer.mutators.composite.AllIncludingDraftSingleMutators;
import eu.solven.cleanthat.engine.java.refactorer.mutators.composite.CompositeMutator;
import eu.solven.cleanthat.engine.java.refactorer.test.LocalClassTestHelper;

// BEWARE: This will generate a versioned file: It may lead to unexpected result. However, it will also make sure this file is often up-to-date
public class TestGenerateDocumentation {
	private static final Logger LOGGER = LoggerFactory.getLogger(TestGenerateDocumentation.class);

	static final String EOL = System.lineSeparator();

	static String URL_PREFIX = "java/src/main/java/";

	@Test
	public void doGenerateDocumentation() throws IOException {
		StringBuilder sb = new StringBuilder();
		sb.append("# Mutators");

		addSingleMutators(sb);
		addCompositeMutators(sb);

		sb.append(EOL)
				.append("---")
				.append(EOL)
				.append("This fill is generated by ")
				.append(TestGenerateDocumentation.class.getName());

		Path srcMainResources = LocalClassTestHelper.getSrcMainResourceFolder();

		Path targetFile = srcMainResources.resolve("../../../MUTATORS.generated.MD").normalize();

		LOGGER.info("Writing into {}", targetFile);
		Files.writeString(targetFile, sb.toString(), StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
	}

	private static void addSingleMutators(StringBuilder sb) {
		CompositeMutator<IMutator> allSingles =
				new AllIncludingDraftSingleMutators(JavaVersion.parse(IJdkVersionConstants.LAST));

		sb.append(EOL).append("## Single Mutators");

		for (IMutator mutator : allSingles.getUnderlyings()) {
			addMutatorInfo(sb, mutator);
		}
	}

	private static void addCompositeMutators(StringBuilder sb) {
		CompositeMutator<CompositeMutator<?>> allComposites =
				new AllIncludingDraftCompositeMutators(JavaVersion.parse(IJdkVersionConstants.LAST));

		sb.append(EOL).append("## Composite Mutators");

		for (CompositeMutator<?> mutator : allComposites.getUnderlyings()) {
			addMutatorInfo(sb, mutator);
		}
	}

	private static void addMutatorInfo(StringBuilder sb, IMutator mutator) {
		sb.append(EOL).append(EOL).append("### ").append('[').append(mutator.getClass().getSimpleName()).append(']');

		String relativePath = mutator.getClass().getName().replace('.', '/');
		sb.append('(').append(URL_PREFIX).append(relativePath).append(".java").append(')').append(EOL);

		addRefToExternalRules(sb, mutator);

		if (mutator.isDraft()) {
			sb.append(EOL).append("isDraft");
		}

		sb.append(EOL).append("required sourceVersion:").append(mutator.minimalJavaVersion());
	}

	private static void addRefToExternalRules(StringBuilder sb, IMutator mutator) {
		mutator.getPmdId().ifPresent(ruleId -> {
			sb.append(EOL).append("PMD id: ").append(ruleId);
			if (mutator instanceof IRuleExternalReferences) {
				String url = ((IRuleExternalReferences) mutator).pmdUrl();
				if (!Strings.isNullOrEmpty(url)) {
					sb.append(EOL).append("PMD url: ").append(url);
				}
			}
		});
		mutator.getCheckstyleId().ifPresent(ruleId -> {
			sb.append(EOL).append("CheckStyle id: ").append(ruleId);
			if (mutator instanceof IRuleExternalReferences) {
				String url = ((IRuleExternalReferences) mutator).checkstyleUrl();
				if (!Strings.isNullOrEmpty(url)) {
					sb.append(EOL).append("CheckStyle url: ").append(url);
				}
			}
		});
		mutator.getSonarId().ifPresent(ruleId -> {
			sb.append(EOL).append("Sonar id: ").append(ruleId);
			if (mutator instanceof IRuleExternalReferences) {
				String url = ((IRuleExternalReferences) mutator).checkstyleUrl();
				if (!Strings.isNullOrEmpty(url)) {
					sb.append(EOL).append("Sonar url: ").append(url);
				}
			}
		});
	}
}
