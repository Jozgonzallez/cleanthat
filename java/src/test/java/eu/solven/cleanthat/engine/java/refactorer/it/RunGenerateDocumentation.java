/*
 * Copyright 2023 Benoit Lacelle - SOLVEN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.solven.cleanthat.engine.java.refactorer.it;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import org.codehaus.plexus.languages.java.version.JavaVersion;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Strings;

import eu.solven.cleanthat.engine.java.IJdkVersionConstants;
import eu.solven.cleanthat.engine.java.refactorer.meta.IMutator;
import eu.solven.cleanthat.engine.java.refactorer.meta.IRuleExternalReferences;
import eu.solven.cleanthat.engine.java.refactorer.mutators.composite.AllIncludingDraftSingleMutators;
import eu.solven.cleanthat.engine.java.refactorer.test.LocalClassTestHelper;

public class RunGenerateDocumentation {
	private static final Logger LOGGER = LoggerFactory.getLogger(RunGenerateDocumentation.class);

	static final String EOL = System.lineSeparator();

	public static void main(String[] args) throws IOException {
		StringBuilder sb = new StringBuilder();
		sb.append("# Mutators").append(EOL).append(EOL);

		AllIncludingDraftSingleMutators allSingles =
				new AllIncludingDraftSingleMutators(JavaVersion.parse(IJdkVersionConstants.LAST));

		sb.append("## Single Mutators").append(EOL).append(EOL);

		for (IMutator mutator : allSingles.getUnderlyings()) {
			sb.append(EOL)
					.append("### ")
					.append('[')
					.append(mutator.getClass().getSimpleName())
					.append(']')
					.append('(')
					.append("https://github.com/solven-eu/cleanthat/blob/master/java/src/main/java/")
					.append(mutator.getClass().getName().replace('.', '/'))
					.append(".java")
					.append(')')
					.append(EOL)
					.append(EOL);

			{
				mutator.getPmdId().ifPresent(ruleId -> {
					sb.append("PMD id: ").append(ruleId).append(EOL);
					if (mutator instanceof IRuleExternalReferences) {
						String url = ((IRuleExternalReferences) mutator).pmdUrl();
						if (!Strings.isNullOrEmpty(url)) {
							sb.append("PMD url: ").append(url).append(EOL);
						}
					}
					// sb.append(ruleId).append(EOL);
				});
			}
			{
				mutator.getCheckstyleId().ifPresent(ruleId -> {
					sb.append("CheckStyle id: ").append(ruleId).append(EOL);
					if (mutator instanceof IRuleExternalReferences) {
						String url = ((IRuleExternalReferences) mutator).checkstyleUrl();
						if (!Strings.isNullOrEmpty(url)) {
							sb.append("CheckStyle url: ").append(url).append(EOL);
						}
					}
					// sb.append(ruleId).append(EOL);
				});

			}
			{
				mutator.getSonarId().ifPresent(ruleId -> {
					sb.append("Sonar id: ").append(ruleId).append(EOL);
					if (mutator instanceof IRuleExternalReferences) {
						String url = ((IRuleExternalReferences) mutator).checkstyleUrl();
						if (!Strings.isNullOrEmpty(url)) {
							sb.append("Sonar url: ").append(url).append(EOL);
						}
					}
					// sb.append(ruleId).append(EOL);
				});
			}

			if (mutator.isDraft()) {
				sb.append("isDraft").append(EOL);
			}

			sb.append("required sourceVersion:").append(mutator.minimalJavaVersion()).append(EOL);
		}

		sb.append("This fill is generated by ").append(RunGenerateDocumentation.class.getName()).append(EOL);

		Path srcMainResources = LocalClassTestHelper.getSrcMainResourceFolder();

		Path targetFile = srcMainResources.resolve("../../../MUTATORS.generated.MD").normalize();

		LOGGER.info("Writing into {}", targetFile);
		Files.writeString(targetFile, sb.toString(), StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
	}
}
